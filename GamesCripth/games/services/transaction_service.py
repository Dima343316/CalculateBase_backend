import logging
import uuid
from decimal import Decimal
from django.db import transaction, IntegrityError
from users.models import User
from games.models import UserBalance, TransactionHistory, Coin
import requests
import environ

env = environ.Env()
environ.Env.read_env()


# –ë–µ—Ä—ë–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ .env
TON_API_URL = env("TON_API_URL")
TON_JETTON_INFO_URL = env("TON_JETTON_INFO_URL")
WALLET_ADDRESS = env("WALLET_ADDRESS")
SUPPORTED_COINS = env.list("SUPPORTED_COINS", default=["TON", "USD‚ÇÆ", "DOGS"])


logger = logging.getLogger("transactions")

class TransactionService:
    """–°–µ—Ä–≤–∏—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏–ø—Ç–æ-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""

    @staticmethod
    def fetch_transactions():
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–æ—à–µ–ª—å–∫–∞."""
        try:
            logger.info("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...")
            response = requests.get(f"{TON_API_URL}?account={WALLET_ADDRESS}&limit=20&sort=desc")
            response.raise_for_status()

            transactions = response.json().get("actions", [])
            if not transactions:
                logger.warning("‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
            return transactions
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}", exc_info=True)
            return []

    @staticmethod
    def get_jetton_symbol(asset_address):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –ø–æ –µ–≥–æ –∞–¥—Ä–µ—Å—É."""
        try:
            response = requests.get(f"{TON_JETTON_INFO_URL}{asset_address}")
            response.raise_for_status()

            symbol = response.json().get("metadata", {}).get("symbol")
            if symbol:
                logger.info(f"‚úÖ –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞: {symbol}")
            return symbol
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞: {e}", exc_info=True)
            return None

    @staticmethod
    @transaction.atomic
    def process_transaction(action):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é."""
        if not action.get("success"):
            logger.warning("‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            return

        trace_id = action.get("trace_id")
        details = action.get("details", {})
        comment = details.get("comment")
        amount = details.get("value")
        asset_address = details.get("asset")

        if not all([trace_id, comment, amount]):
            logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: {action}")
            return

        if TransactionHistory.objects.filter(trace_id=trace_id).exists():
            logger.warning(f"‚ö†Ô∏è –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {trace_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.")
            return

        try:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ memo_phrase: {comment}")
            user = User.objects.filter(memo_phrase=comment).first()
            if not user:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å memo_phrase {comment} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            logger.info(f"üîÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {asset_address}...")
            token_symbol = TransactionService.get_jetton_symbol(asset_address)
            if not token_symbol:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –¥–ª—è {asset_address}.")
                return

            logger.info(f"üîÑ –ü–æ–∏—Å–∫ –º–æ–Ω–µ—Ç—ã {token_symbol} –≤ –±–∞–∑–µ...")
            coin = Coin.objects.filter(symbol=token_symbol).first()
            if not coin:
                logger.warning(f"‚ö†Ô∏è –ö–æ–∏–Ω {token_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
                return

            amount = Decimal(int(amount)) / Decimal(1e9)
            logger.info(f"üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –Ω–∞ {amount} {coin.symbol}.")

            user_balance, _ = UserBalance.objects.get_or_create(user=user, coin=coin, defaults={"amount": Decimal(0)})
            user_balance.amount += amount
            user_balance.save(update_fields=["amount"])

            transaction_id = str(uuid.uuid4())
            TransactionHistory.objects.create(
                user_balance=user_balance,
                amount=amount,
                type="arrival",
                subtype="deposit",
                trace_id=trace_id,
                transaction_id=transaction_id
            )

            logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {trace_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} {coin.symbol}.")
        except IntegrityError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {trace_id}: {e}", exc_info=True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {trace_id}: {e}", exc_info=True)

    @staticmethod
    def process_deposit():
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞."""
        transactions = TransactionService.fetch_transactions()

        for action in transactions:
            logger.info(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {action.get('trace_id')}")
            TransactionService.process_transaction(action)